{"posts":[{"title":"用 CSS in JS 的方式来解决 Web 项目的适配问题","text":"前端适配是 web 端项目常常遇到的一个问题，如何来实现呢，这里我结合最近在做的一个官网项目提供一个解决方案，如有更好的方案，欢迎讨论 首先介绍一下所用到的技术栈 项目框架：Next.js样式：styled-components组件库：Material UI项目中我们使用的长度单位是rem，这里推荐一个挺好用的 vscode 插件：px to rem 一般来说现在的css工具包在打包的时候都会对各个浏览器的进行Polyfill，所以样式的兼容我们不必过多的考虑，更多的是对设备尺寸的适配 样式适配我用的是 CSS媒体查询，这一部分也不需要过多的赘述 CSS in JS在接触css in js 之前我觉得很鸡肋，不过就是把样式写在了js文件里，并且以组件的形式来使用，有点多此一举的感觉，相对于CSS module ，样式的层级反而不够清晰，相对于tailwind，写法上也不是很方便，而且样式组件和JS组件混在一起，看起来就不清晰 但是用过之后，我发现，是我格局小了 这里分享一个 CSS in JS 各种方案的对比表 CSS-in-JS​michelebertoli.github.io/css-in-js/其中比较火的有两个 emotionstyled-components其实可以单独写篇文章来对 CSS in JS 的各种方案进行一个对比，这个下篇文章再搞吧 我这里使用的是styled-components，以下一个简单的例子 1234567891011121314151617181920212223import styled from 'styled-components'// Create a Title component that'll render an &lt;h1&gt; tag with some stylesconst Title = styled.h1` font-size: 1.5em; text-align: center; color: #BF4F74;`;// Create a Wrapper component that'll render a &lt;section&gt; tag with some stylesconst Wrapper = styled.section` padding: 4em; background: papayawhip;`;// Use Title and Wrapper like any other React component – except they're styled!render( &lt;Wrapper&gt; &lt;Title&gt; Hello World! &lt;/Title&gt; &lt;/Wrapper&gt;); styled会继承原来的组件的样式来进行样式的定义，所以，样式组件也是可以被其他样式组件继承重写的 以下是一个真实场景中的例子，这里的Content组件有四种状态，由两个变量控制 select：是否选中page：当前路由以及移动端的适配 1234567891011121314const Content = styled('div') &lt;{ select?: string, page: string }&gt;` display: flex; gap: 1rem; flex-wrap: wrap; flex-direction: row; justify-content: space-between; align-items: stretch; margin-top: ${({ select }) =&gt; select ? '4rem' : '2rem'}; ; @media screen and (max-width: 989px) { margin-top: ${({ page }) =&gt; page === 'choose' ? '1.25rem' : '2rem'}; flex-direction: column; };` style-component整体用下来，让我感觉页面结构清晰了不少，并且这种样式继承的功能太好用了","link":"/2024/03/01/css-in-js/"},{"title":"Eslint 配置","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/02/20/eslint/"},{"title":"坐标范围选取组件【React】","text":"涉及 API onMouseDown onMouseMove onMouseUp getBoundingClientRect 效果 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import React, { useCallback, useState } from &quot;react&quot;;const DragSelectComponent = () =&gt; { const [startPoint, setStartPoint] = useState({ x: 0, y: 0 }); const [endPoint, setEndPoint] = useState({ x: 0, y: 0 }); const [rect, setRect] = useState({ left: 0, top: 0 }); const [selecting, setSelecting] = useState(false); const getRect = () =&gt; { return rect; }; const handleMouseDown = (e: any) =&gt; { setSelecting(true); var rect = e.target.getBoundingClientRect(); setRect({ left: rect.left, top: rect.top }); // 获取鼠标点击位置相对于容器的坐标 const x = e.clientX - rect.left; const y = e.clientY - rect.top; setStartPoint({ x, y }); setEndPoint({ x, y }); }; const handleMouseMove = (e: any) =&gt; { if (selecting) { var rect = getRect(); // 获取鼠标点击位置相对于容器的坐标 const x = e.clientX - rect.left; const y = e.clientY - rect.top; setEndPoint({ x, y }); } }; const handleMouseUp = useCallback(() =&gt; { setSelecting(false); }, []); return ( &lt;div&gt; &lt;div&gt; &lt;div&gt;画板坐标：{JSON.stringify(rect)}&lt;/div&gt; &lt;div&gt;起始坐标：{JSON.stringify(startPoint)}&lt;/div&gt; &lt;div&gt;结束坐标：{JSON.stringify(endPoint)}&lt;/div&gt; &lt;/div&gt; &lt;div onMouseDown={handleMouseDown} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp} style={{ position: &quot;relative&quot;, width: &quot;500px&quot;, height: &quot;400px&quot;, border: &quot;1px solid black&quot;, }} &gt; &lt;div style={{ position: &quot;absolute&quot;, top: Math.min(startPoint.y, endPoint.y), left: Math.min(startPoint.x, endPoint.x), width: Math.abs(endPoint.x - startPoint.x), height: Math.abs(endPoint.y - startPoint.y), border: &quot;1px dashed blue&quot;, backgroundColor: &quot;rgba(0, 0, 255, 0.1)&quot;, }} /&gt; &lt;/div&gt; &lt;/div&gt; );};export default DragSelectComponent;","link":"/2024/04/23/components/drag-select/"},{"title":"基于 Docker 搭建 Mysql 环境","text":"配置 Docker 环境我这里直接安装Docker desktop 有些Mac版本和docker版本会不兼容，所以这一步骤需要根据自己的Mac版本找到对应的Docker版本，以下是各个版本地址 https://docs.docker.com/desktop/release-notes/ 配置 Mysql 环境MySQL环境我直接用docker命令来安装 首先检查一下docker是否安装成功12➜ ~ docker --versionDocker version 24.0.6, build ed223bc Docker 创建一个数据存储空间12➜ ~ docker volume create demo-voldemo-vol Docker 安装mysql环境123456789➜ ~ docker run --name demo-mysql \\ --restart=always \\ -v demo-vol:/var/lib/mysql \\ -p 3306:3306 \\ -e MYSQL_ROOT_PASSWORD=root \\ -e MYSQL_DATABASE=demo \\ -e MYSQL_USER=admin \\ -e MYSQL_PASSWORD=123456 \\ -d mysql:8.0.18 第一次安装时间会比较久，安装完成之后docker就自动启动了这个 mysql 的容器 123➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4640b067171e mysql:8.0.18 &quot;docker-entrypoint.s…&quot; 25 seconds ago Up 23 seconds 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp demo-mysql 进入mysql容器12➜ ~docker exec -it 4640b067171e /bin/bashroot@4640b067171e:/# 登录mysql123456789101112131415root@4640b067171e:/# mysql -uadmin -p123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 8Server version: 8.0.18 MySQL Community Server - GPLCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; 常用的mysql命令执行mysql命令的时候有个需要特别注意的是命令结束位置需要有分号 查看database列表12345678910mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || demo |+--------------------+2 rows in set (0.01 sec)mysql&gt; 指明使用的数据库12mysql&gt; use demoDatabase changed 创建table12mysql&gt; create table test(id int not null auto_increment,title varchar(100) not null,author varchar(40) not null,primary key (id));Query OK, 0 rows affected (0.02 sec) 查看数据库1234567mysql&gt; show tables from demo;+---------------------+| Tables_in_demo |+---------------------+| test |+---------------------+1 row in set (0.00 sec) 插入一条数据12mysql&gt; insert into test(id,title,author)values(20,&quot;janelove&quot;,&quot;jane&quot;);Query OK, 1 row affected (0.01 sec) 4、查看test表信息 1234567mysql&gt; select * from test;+----+----------+--------+| id | title | author |+----+----------+--------+| 20 | janelove | jane |+----+----------+--------+1 row in set (0.00 sec) 查看test表的数据结构123456789mysql&gt; desc test;+--------+--------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+--------+--------------+------+-----+---------+----------------+| id | int(11) | NO | PRI | NULL | auto_increment || title | varchar(100) | NO | | NULL | || author | varchar(40) | NO | | NULL | |+--------+--------------+------+-----+---------+----------------+3 rows in set (0.00 sec) 修改表字段类型1mysql&gt; alter table test modify title varchar(22); 增加表字段1mysql&gt; alter table test add column age int(3); 删除表字段1mysql&gt; alter table test drop column age; 删除表1234mysql&gt; drop table test;Query OK, 0 rows affected (0.02 sec)mysql&gt; 删除数据库1mysql&gt; drop database demo;","link":"/2024/04/03/mysql/"}],"tags":[{"name":"css","slug":"css","link":"/tags/css/"},{"name":"css in js","slug":"css-in-js","link":"/tags/css-in-js/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"组件","slug":"组件","link":"/tags/%E7%BB%84%E4%BB%B6/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"docker","slug":"docker","link":"/tags/docker/"}],"categories":[{"name":"css","slug":"css","link":"/categories/css/"},{"name":"css in js","slug":"css/css-in-js","link":"/categories/css/css-in-js/"},{"name":"web","slug":"css/css-in-js/web","link":"/categories/css/css-in-js/web/"},{"name":"React","slug":"React","link":"/categories/React/"},{"name":"mysql","slug":"mysql","link":"/categories/mysql/"}],"pages":[]}